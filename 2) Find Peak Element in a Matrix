class Solution {
public:

    int solve(int col,vector<vector<int>>&grid)
    {
        int n=grid.size(); int m=grid[0].size();

        int index=-1;
        int maxi=INT_MIN;

        for(int row=0;row<n;row++)
        {
            if(grid[row][col]>maxi)
            {
                maxi=grid[row][col];
                index=row;
            }
        }

        return index;
    }

    vector<int> findPeakGrid(vector<vector<int>>& grid) {
        
        int n=grid.size();
        int m=grid[0].size();

        int start=0,end=m-1;

        while(start<=end)
        {
            int mid=start+(end-start)/2;

            int max_row_index=solve(mid,grid);

            int left,right;

            if(mid-1>=0)
            {
               left=grid[max_row_index][mid-1];
            }
            else
            {
                left=-1;
            }


            if(mid+1<m)
            {
                right=grid[max_row_index][mid+1];

            }
            else
            {
               right=-1;
            }


            int temp=grid[max_row_index][mid];

            if(temp>left and temp>right)
            {
                return {max_row_index,mid};
            }
            else if(temp>left)
            {
                start=mid+1;
            }
            else
            {
                end=mid-1;
            }
        }


        return {-1,-1};
    }
};
